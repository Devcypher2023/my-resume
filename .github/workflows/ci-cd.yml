name: build push and deploy image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE: ${{ secrets.AWS_ACTION_ROLE }}   #secret created in github that holds arn
  ECR_REPO_NAME: dev
  IMAGE_TAG: ${{github.run_number}}


jobs:
  build:
    runs-on: ubuntu-latest               # its a runner but also know as a share runner (git hub runner) compute enviroment on where command will run, we are setting the enivroment
    steps:
      - name: clone repo
        uses: actions/checkout@v3        # its an action that runs a command

      - name: Aws creds config
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE}}               # we are using OIDC, instead of secret and acess keys, 
          aws-region: ${{ env.AWS_REGION}}

      - name: Login into ecr
        uses: aws-actions/amazon-ecr-login@v1
        id: ecr-login   # the meta data of the taks is stored in id its like a variable 

      - name: Build tag
        id: build-and-push
        run: |   # use pipe if running multipule commands
            docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}} .
            
      - name: Scan docker Image for vulnerabilites      # using trivy to scan code 
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}"  # Scans the built image
          format: "table"
          exit-code: "1"
          severity: "CRITICAL,HIGH"

      - name: Push image to ecr
        run: |
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}
